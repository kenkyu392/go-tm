package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/kenkyu392/go-tm/tag"
	_ "github.com/kenkyu392/go-tm/tag/all"
)

const (
	dirName  = ""
	fileName = "tags.gen.go"
)

const tmpl = `// Code generated by go go-tm. DO NOT EDIT.
package tm
import ("golang.org/x/text/language")
// var ...
var (
	%s
)
`

func outPath(dir, file string) (string, error) {
	outDir, err := filepath.Abs(dir)
	if err != nil {
		return "", err
	}

	stat, err := os.Stat(outDir)
	if err != nil {
		return "", err
	}

	if !stat.IsDir() {
		return "", fmt.Errorf("%s is not a directory", outDir)
	}
	outDir = outDir + "/"
	return filepath.Join(outDir, file), nil
}

func genCode() string {
	list := make([]string, 0)
	for _, v := range tag.Languages() {
		t := v.TagName
		vt := strings.ReplaceAll(t, "-", "")
		list = append(list, fmt.Sprintf(`Tag_%s = language.MustParse("%s") // %s`, vt, t, v.DisplayName))
	}
	// sort.Strings(list)
	return fmt.Sprintf(tmpl, strings.TrimSpace(strings.Join(list, "\n\t")))
}

func main() {
	out, err := outPath(dirName, fileName)
	if err != nil {
		panic("generate: " + err.Error())
	}
	code := genCode()
	if err := ioutil.WriteFile(out, []byte(code), os.ModePerm); err != nil {
		panic("generate: " + err.Error())
	}
	print("generated: ", out)
}
